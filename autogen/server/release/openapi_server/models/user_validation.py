# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email=None, first_name=None, last_name=None, company_name=None, department_name=None, pay_rate=None, company_id=None, department_id=None, is_email_valid=None, is_company_valid=None, is_department_valid=None, is_pay_rate_valid=None, is_employee_valid=None):  # noqa: E501
        """UserValidation - a model defined in OpenAPI

        :param email: The email of this UserValidation.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this UserValidation.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this UserValidation.  # noqa: E501
        :type last_name: str
        :param company_name: The company_name of this UserValidation.  # noqa: E501
        :type company_name: str
        :param department_name: The department_name of this UserValidation.  # noqa: E501
        :type department_name: str
        :param pay_rate: The pay_rate of this UserValidation.  # noqa: E501
        :type pay_rate: float
        :param company_id: The company_id of this UserValidation.  # noqa: E501
        :type company_id: int
        :param department_id: The department_id of this UserValidation.  # noqa: E501
        :type department_id: int
        :param is_email_valid: The is_email_valid of this UserValidation.  # noqa: E501
        :type is_email_valid: bool
        :param is_company_valid: The is_company_valid of this UserValidation.  # noqa: E501
        :type is_company_valid: bool
        :param is_department_valid: The is_department_valid of this UserValidation.  # noqa: E501
        :type is_department_valid: bool
        :param is_pay_rate_valid: The is_pay_rate_valid of this UserValidation.  # noqa: E501
        :type is_pay_rate_valid: bool
        :param is_employee_valid: The is_employee_valid of this UserValidation.  # noqa: E501
        :type is_employee_valid: bool
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'last_name': str,
            'company_name': str,
            'department_name': str,
            'pay_rate': float,
            'company_id': int,
            'department_id': int,
            'is_email_valid': bool,
            'is_company_valid': bool,
            'is_department_valid': bool,
            'is_pay_rate_valid': bool,
            'is_employee_valid': bool
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'company_name': 'company_name',
            'department_name': 'department_name',
            'pay_rate': 'pay_rate',
            'company_id': 'company_id',
            'department_id': 'department_id',
            'is_email_valid': 'is_email_valid',
            'is_company_valid': 'is_company_valid',
            'is_department_valid': 'is_department_valid',
            'is_pay_rate_valid': 'is_pay_rate_valid',
            'is_employee_valid': 'is_employee_valid'
        }

        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.company_name = company_name
        self.department_name = department_name
        self.pay_rate = pay_rate
        self.company_id = company_id
        self.department_id = department_id
        self.is_email_valid = is_email_valid
        self.is_company_valid = is_company_valid
        self.is_department_valid = is_department_valid
        self.is_pay_rate_valid = is_pay_rate_valid
        self.is_employee_valid = is_employee_valid

    @classmethod
    def from_dict(cls, dikt) -> 'UserValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserValidation of this UserValidation.  # noqa: E501
        :rtype: UserValidation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserValidation.


        :return: The email of this UserValidation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserValidation.


        :param email: The email of this UserValidation.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserValidation.


        :return: The first_name of this UserValidation.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserValidation.


        :param first_name: The first_name of this UserValidation.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserValidation.


        :return: The last_name of this UserValidation.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserValidation.


        :param last_name: The last_name of this UserValidation.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this UserValidation.


        :return: The company_name of this UserValidation.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this UserValidation.


        :param company_name: The company_name of this UserValidation.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def department_name(self):
        """Gets the department_name of this UserValidation.


        :return: The department_name of this UserValidation.
        :rtype: str
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this UserValidation.


        :param department_name: The department_name of this UserValidation.
        :type department_name: str
        """
        if department_name is None:
            raise ValueError("Invalid value for `department_name`, must not be `None`")  # noqa: E501

        self._department_name = department_name

    @property
    def pay_rate(self):
        """Gets the pay_rate of this UserValidation.


        :return: The pay_rate of this UserValidation.
        :rtype: float
        """
        return self._pay_rate

    @pay_rate.setter
    def pay_rate(self, pay_rate):
        """Sets the pay_rate of this UserValidation.


        :param pay_rate: The pay_rate of this UserValidation.
        :type pay_rate: float
        """

        self._pay_rate = pay_rate

    @property
    def company_id(self):
        """Gets the company_id of this UserValidation.


        :return: The company_id of this UserValidation.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UserValidation.


        :param company_id: The company_id of this UserValidation.
        :type company_id: int
        """

        self._company_id = company_id

    @property
    def department_id(self):
        """Gets the department_id of this UserValidation.


        :return: The department_id of this UserValidation.
        :rtype: int
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this UserValidation.


        :param department_id: The department_id of this UserValidation.
        :type department_id: int
        """

        self._department_id = department_id

    @property
    def is_email_valid(self):
        """Gets the is_email_valid of this UserValidation.


        :return: The is_email_valid of this UserValidation.
        :rtype: bool
        """
        return self._is_email_valid

    @is_email_valid.setter
    def is_email_valid(self, is_email_valid):
        """Sets the is_email_valid of this UserValidation.


        :param is_email_valid: The is_email_valid of this UserValidation.
        :type is_email_valid: bool
        """

        self._is_email_valid = is_email_valid

    @property
    def is_company_valid(self):
        """Gets the is_company_valid of this UserValidation.


        :return: The is_company_valid of this UserValidation.
        :rtype: bool
        """
        return self._is_company_valid

    @is_company_valid.setter
    def is_company_valid(self, is_company_valid):
        """Sets the is_company_valid of this UserValidation.


        :param is_company_valid: The is_company_valid of this UserValidation.
        :type is_company_valid: bool
        """

        self._is_company_valid = is_company_valid

    @property
    def is_department_valid(self):
        """Gets the is_department_valid of this UserValidation.


        :return: The is_department_valid of this UserValidation.
        :rtype: bool
        """
        return self._is_department_valid

    @is_department_valid.setter
    def is_department_valid(self, is_department_valid):
        """Sets the is_department_valid of this UserValidation.


        :param is_department_valid: The is_department_valid of this UserValidation.
        :type is_department_valid: bool
        """

        self._is_department_valid = is_department_valid

    @property
    def is_pay_rate_valid(self):
        """Gets the is_pay_rate_valid of this UserValidation.


        :return: The is_pay_rate_valid of this UserValidation.
        :rtype: bool
        """
        return self._is_pay_rate_valid

    @is_pay_rate_valid.setter
    def is_pay_rate_valid(self, is_pay_rate_valid):
        """Sets the is_pay_rate_valid of this UserValidation.


        :param is_pay_rate_valid: The is_pay_rate_valid of this UserValidation.
        :type is_pay_rate_valid: bool
        """

        self._is_pay_rate_valid = is_pay_rate_valid

    @property
    def is_employee_valid(self):
        """Gets the is_employee_valid of this UserValidation.


        :return: The is_employee_valid of this UserValidation.
        :rtype: bool
        """
        return self._is_employee_valid

    @is_employee_valid.setter
    def is_employee_valid(self, is_employee_valid):
        """Sets the is_employee_valid of this UserValidation.


        :param is_employee_valid: The is_employee_valid of this UserValidation.
        :type is_employee_valid: bool
        """

        self._is_employee_valid = is_employee_valid
