# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PackageQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title=None, value=None, values=None, data_type=None):  # noqa: E501
        """PackageQuestion - a model defined in OpenAPI

        :param title: The title of this PackageQuestion.  # noqa: E501
        :type title: str
        :param value: The value of this PackageQuestion.  # noqa: E501
        :type value: str
        :param values: The values of this PackageQuestion.  # noqa: E501
        :type values: List[str]
        :param data_type: The data_type of this PackageQuestion.  # noqa: E501
        :type data_type: str
        """
        self.openapi_types = {
            'title': str,
            'value': str,
            'values': List[str],
            'data_type': str
        }

        self.attribute_map = {
            'title': 'title',
            'value': 'value',
            'values': 'values',
            'data_type': 'data_type'
        }

        self.title = title
        self.value = value
        self.values = values
        self.data_type = data_type

    @classmethod
    def from_dict(cls, dikt) -> 'PackageQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PackageQuestion of this PackageQuestion.  # noqa: E501
        :rtype: PackageQuestion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this PackageQuestion.

        Text that outlines the question.  # noqa: E501

        :return: The title of this PackageQuestion.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PackageQuestion.

        Text that outlines the question.  # noqa: E501

        :param title: The title of this PackageQuestion.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def value(self):
        """Gets the value of this PackageQuestion.

        The value stored by the question.  # noqa: E501

        :return: The value of this PackageQuestion.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PackageQuestion.

        The value stored by the question.  # noqa: E501

        :param value: The value of this PackageQuestion.
        :type value: str
        """

        self._value = value

    @property
    def values(self):
        """Gets the values of this PackageQuestion.

        The potential values, if any, of the question.  # noqa: E501

        :return: The values of this PackageQuestion.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this PackageQuestion.

        The potential values, if any, of the question.  # noqa: E501

        :param values: The values of this PackageQuestion.
        :type values: List[str]
        """

        self._values = values

    @property
    def data_type(self):
        """Gets the data_type of this PackageQuestion.

        The type of the question.  # noqa: E501

        :return: The data_type of this PackageQuestion.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this PackageQuestion.

        The type of the question.  # noqa: E501

        :param data_type: The data_type of this PackageQuestion.
        :type data_type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type
