# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.user_validation import UserValidation
from openapi_server import util

from openapi_server.models.user_validation import UserValidation  # noqa: E501

class UserValidationList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, validations=None):  # noqa: E501
        """UserValidationList - a model defined in OpenAPI

        :param validations: The validations of this UserValidationList.  # noqa: E501
        :type validations: List[UserValidation]
        """
        self.openapi_types = {
            'validations': List[UserValidation]
        }

        self.attribute_map = {
            'validations': 'validations'
        }

        self.validations = validations

    @classmethod
    def from_dict(cls, dikt) -> 'UserValidationList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserValidationList of this UserValidationList.  # noqa: E501
        :rtype: UserValidationList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def validations(self):
        """Gets the validations of this UserValidationList.


        :return: The validations of this UserValidationList.
        :rtype: List[UserValidation]
        """
        return self._validations

    @validations.setter
    def validations(self, validations):
        """Sets the validations of this UserValidationList.


        :param validations: The validations of this UserValidationList.
        :type validations: List[UserValidation]
        """
        if validations is None:
            raise ValueError("Invalid value for `validations`, must not be `None`")  # noqa: E501

        self._validations = validations
