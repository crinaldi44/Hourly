# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code=None, status=None, developer_message=None, user_message=None, resolution=None, more_info=None, field=None, error_id=None):  # noqa: E501
        """Error - a model defined in OpenAPI

        :param code: The code of this Error.  # noqa: E501
        :type code: str
        :param status: The status of this Error.  # noqa: E501
        :type status: int
        :param developer_message: The developer_message of this Error.  # noqa: E501
        :type developer_message: str
        :param user_message: The user_message of this Error.  # noqa: E501
        :type user_message: str
        :param resolution: The resolution of this Error.  # noqa: E501
        :type resolution: str
        :param more_info: The more_info of this Error.  # noqa: E501
        :type more_info: str
        :param field: The field of this Error.  # noqa: E501
        :type field: str
        :param error_id: The error_id of this Error.  # noqa: E501
        :type error_id: str
        """
        self.openapi_types = {
            'code': str,
            'status': int,
            'developer_message': str,
            'user_message': str,
            'resolution': str,
            'more_info': str,
            'field': str,
            'error_id': str
        }

        self.attribute_map = {
            'code': 'code',
            'status': 'status',
            'developer_message': 'developerMessage',
            'user_message': 'userMessage',
            'resolution': 'resolution',
            'more_info': 'moreInfo',
            'field': 'field',
            'error_id': 'errorId'
        }

        self.code = code
        self.status = status
        self.developer_message = developer_message
        self.user_message = user_message
        self.resolution = resolution
        self.more_info = more_info
        self.field = field
        self.error_id = error_id

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.  # noqa: E501
        :rtype: Error
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Error.

        A machine-readable unique identifier of the error. The code will never change and should be used to identify the specific error.  # noqa: E501

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        A machine-readable unique identifier of the error. The code will never change and should be used to identify the specific error.  # noqa: E501

        :param code: The code of this Error.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def status(self):
        """Gets the status of this Error.

        The HTTP status code. Included here for quick reference.  # noqa: E501

        :return: The status of this Error.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error.

        The HTTP status code. Included here for quick reference.  # noqa: E501

        :param status: The status of this Error.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def developer_message(self):
        """Gets the developer_message of this Error.

        A message to the developer about the error message. This may change at any time and should not be shown to the end user.  # noqa: E501

        :return: The developer_message of this Error.
        :rtype: str
        """
        return self._developer_message

    @developer_message.setter
    def developer_message(self, developer_message):
        """Sets the developer_message of this Error.

        A message to the developer about the error message. This may change at any time and should not be shown to the end user.  # noqa: E501

        :param developer_message: The developer_message of this Error.
        :type developer_message: str
        """

        self._developer_message = developer_message

    @property
    def user_message(self):
        """Gets the user_message of this Error.

        A message that can be displayed to the end user. This may change at any time. You may want to check the error code and create a custom error message.  # noqa: E501

        :return: The user_message of this Error.
        :rtype: str
        """
        return self._user_message

    @user_message.setter
    def user_message(self, user_message):
        """Sets the user_message of this Error.

        A message that can be displayed to the end user. This may change at any time. You may want to check the error code and create a custom error message.  # noqa: E501

        :param user_message: The user_message of this Error.
        :type user_message: str
        """

        self._user_message = user_message

    @property
    def resolution(self):
        """Gets the resolution of this Error.

        A quick suggestion reguaring what to do next. If this does not work, check out the page at \"moreInfo.\"  # noqa: E501

        :return: The resolution of this Error.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Error.

        A quick suggestion reguaring what to do next. If this does not work, check out the page at \"moreInfo.\"  # noqa: E501

        :param resolution: The resolution of this Error.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def more_info(self):
        """Gets the more_info of this Error.

        A link to a webpage with more information about the error.  # noqa: E501

        :return: The more_info of this Error.
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this Error.

        A link to a webpage with more information about the error.  # noqa: E501

        :param more_info: The more_info of this Error.
        :type more_info: str
        """

        self._more_info = more_info

    @property
    def field(self):
        """Gets the field of this Error.

        If the error relates to a specific field, this will show you which field it is.  # noqa: E501

        :return: The field of this Error.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this Error.

        If the error relates to a specific field, this will show you which field it is.  # noqa: E501

        :param field: The field of this Error.
        :type field: str
        """

        self._field = field

    @property
    def error_id(self):
        """Gets the error_id of this Error.

        A unique identifier that relates the error to our internal logs. If you contact support, this should be included.  # noqa: E501

        :return: The error_id of this Error.
        :rtype: str
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this Error.

        A unique identifier that relates the error to our internal logs. If you contact support, this should be included.  # noqa: E501

        :param error_id: The error_id of this Error.
        :type error_id: str
        """

        self._error_id = error_id
