# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.package_question import PackageQuestion
from openapi_server import util

from openapi_server.models.package_question import PackageQuestion  # noqa: E501

class Package(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name='', description='', img_url='', price=0, company_id=None, questions=None):  # noqa: E501
        """Package - a model defined in OpenAPI

        :param id: The id of this Package.  # noqa: E501
        :type id: int
        :param name: The name of this Package.  # noqa: E501
        :type name: str
        :param description: The description of this Package.  # noqa: E501
        :type description: str
        :param img_url: The img_url of this Package.  # noqa: E501
        :type img_url: str
        :param price: The price of this Package.  # noqa: E501
        :type price: float
        :param company_id: The company_id of this Package.  # noqa: E501
        :type company_id: int
        :param questions: The questions of this Package.  # noqa: E501
        :type questions: List[PackageQuestion]
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'description': str,
            'img_url': str,
            'price': float,
            'company_id': int,
            'questions': List[PackageQuestion]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'img_url': 'img_url',
            'price': 'price',
            'company_id': 'company_id',
            'questions': 'questions'
        }

        self.id = id
        self.name = name
        self.description = description
        self.img_url = img_url
        self.price = price
        self.company_id = company_id
        self.questions = questions

    @classmethod
    def from_dict(cls, dikt) -> 'Package':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Package of this Package.  # noqa: E501
        :rtype: Package
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Package.

        The identifier for the role.  # noqa: E501

        :return: The id of this Package.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Package.

        The identifier for the role.  # noqa: E501

        :param id: The id of this Package.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Package.

        name  # noqa: E501

        :return: The name of this Package.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Package.

        name  # noqa: E501

        :param name: The name of this Package.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Package.

        Block of text describing the role.  # noqa: E501

        :return: The description of this Package.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Package.

        Block of text describing the role.  # noqa: E501

        :param description: The description of this Package.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def img_url(self):
        """Gets the img_url of this Package.

        The url to display the image tag.  # noqa: E501

        :return: The img_url of this Package.
        :rtype: str
        """
        return self._img_url

    @img_url.setter
    def img_url(self, img_url):
        """Sets the img_url of this Package.

        The url to display the image tag.  # noqa: E501

        :param img_url: The img_url of this Package.
        :type img_url: str
        """

        self._img_url = img_url

    @property
    def price(self):
        """Gets the price of this Package.

        The price of the package, in USD.  # noqa: E501

        :return: The price of this Package.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Package.

        The price of the package, in USD.  # noqa: E501

        :param price: The price of this Package.
        :type price: float
        """

        self._price = price

    @property
    def company_id(self):
        """Gets the company_id of this Package.

        The ID of the company created by.  # noqa: E501

        :return: The company_id of this Package.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Package.

        The ID of the company created by.  # noqa: E501

        :param company_id: The company_id of this Package.
        :type company_id: int
        """

        self._company_id = company_id

    @property
    def questions(self):
        """Gets the questions of this Package.

        The questions to include in the event form.  # noqa: E501

        :return: The questions of this Package.
        :rtype: List[PackageQuestion]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this Package.

        The questions to include in the event form.  # noqa: E501

        :param questions: The questions of this Package.
        :type questions: List[PackageQuestion]
        """

        self._questions = questions
