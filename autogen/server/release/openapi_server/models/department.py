# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Department(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, manager_id=None, company_id=None):  # noqa: E501
        """Department - a model defined in OpenAPI

        :param id: The id of this Department.  # noqa: E501
        :type id: int
        :param name: The name of this Department.  # noqa: E501
        :type name: str
        :param manager_id: The manager_id of this Department.  # noqa: E501
        :type manager_id: int
        :param company_id: The company_id of this Department.  # noqa: E501
        :type company_id: int
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'manager_id': int,
            'company_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'manager_id': 'manager_id',
            'company_id': 'company_id'
        }

        self.id = id
        self.name = name
        self.manager_id = manager_id
        self.company_id = company_id

    @classmethod
    def from_dict(cls, dikt) -> 'Department':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Department of this Department.  # noqa: E501
        :rtype: Department
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Department.

        The id of the department.  # noqa: E501

        :return: The id of this Department.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Department.

        The id of the department.  # noqa: E501

        :param id: The id of this Department.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Department.

        Block of text containing the name of the department.  # noqa: E501

        :return: The name of this Department.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Department.

        Block of text containing the name of the department.  # noqa: E501

        :param name: The name of this Department.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def manager_id(self):
        """Gets the manager_id of this Department.

        An id representing the ID of the department manager.  # noqa: E501

        :return: The manager_id of this Department.
        :rtype: int
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """Sets the manager_id of this Department.

        An id representing the ID of the department manager.  # noqa: E501

        :param manager_id: The manager_id of this Department.
        :type manager_id: int
        """

        self._manager_id = manager_id

    @property
    def company_id(self):
        """Gets the company_id of this Department.

        The id representing the company the department is in.  # noqa: E501

        :return: The company_id of this Department.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Department.

        The id representing the company the department is in.  # noqa: E501

        :param company_id: The company_id of this Department.
        :type company_id: int
        """

        self._company_id = company_id
