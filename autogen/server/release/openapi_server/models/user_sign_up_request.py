# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserSignUpRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email=None, password=None, first_name=None, last_name=None, role_id=None, pay_rate=None):  # noqa: E501
        """UserSignUpRequest - a model defined in OpenAPI

        :param email: The email of this UserSignUpRequest.  # noqa: E501
        :type email: str
        :param password: The password of this UserSignUpRequest.  # noqa: E501
        :type password: str
        :param first_name: The first_name of this UserSignUpRequest.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this UserSignUpRequest.  # noqa: E501
        :type last_name: str
        :param role_id: The role_id of this UserSignUpRequest.  # noqa: E501
        :type role_id: int
        :param pay_rate: The pay_rate of this UserSignUpRequest.  # noqa: E501
        :type pay_rate: float
        """
        self.openapi_types = {
            'email': str,
            'password': str,
            'first_name': str,
            'last_name': str,
            'role_id': int,
            'pay_rate': float
        }

        self.attribute_map = {
            'email': 'email',
            'password': 'password',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'role_id': 'role_id',
            'pay_rate': 'pay_rate'
        }

        self.email = email
        self.password = password
        self.first_name = first_name
        self.last_name = last_name
        self.role_id = role_id
        self.pay_rate = pay_rate

    @classmethod
    def from_dict(cls, dikt) -> 'UserSignUpRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserSignUpRequest of this UserSignUpRequest.  # noqa: E501
        :rtype: UserSignUpRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserSignUpRequest.

        The users email  # noqa: E501

        :return: The email of this UserSignUpRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSignUpRequest.

        The users email  # noqa: E501

        :param email: The email of this UserSignUpRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserSignUpRequest.

        The users password  # noqa: E501

        :return: The password of this UserSignUpRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserSignUpRequest.

        The users password  # noqa: E501

        :param password: The password of this UserSignUpRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this UserSignUpRequest.


        :return: The first_name of this UserSignUpRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserSignUpRequest.


        :param first_name: The first_name of this UserSignUpRequest.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserSignUpRequest.


        :return: The last_name of this UserSignUpRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserSignUpRequest.


        :param last_name: The last_name of this UserSignUpRequest.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def role_id(self):
        """Gets the role_id of this UserSignUpRequest.


        :return: The role_id of this UserSignUpRequest.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserSignUpRequest.


        :param role_id: The role_id of this UserSignUpRequest.
        :type role_id: int
        """

        self._role_id = role_id

    @property
    def pay_rate(self):
        """Gets the pay_rate of this UserSignUpRequest.


        :return: The pay_rate of this UserSignUpRequest.
        :rtype: float
        """
        return self._pay_rate

    @pay_rate.setter
    def pay_rate(self, pay_rate):
        """Sets the pay_rate of this UserSignUpRequest.


        :param pay_rate: The pay_rate of this UserSignUpRequest.
        :type pay_rate: float
        """

        self._pay_rate = pay_rate
