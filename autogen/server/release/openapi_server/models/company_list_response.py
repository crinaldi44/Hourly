# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.company import Company
from openapi_server import util

from openapi_server.models.company import Company  # noqa: E501

class CompanyListResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data=None, message=None, status=None):  # noqa: E501
        """CompanyListResponse - a model defined in OpenAPI

        :param data: The data of this CompanyListResponse.  # noqa: E501
        :type data: List[Company]
        :param message: The message of this CompanyListResponse.  # noqa: E501
        :type message: str
        :param status: The status of this CompanyListResponse.  # noqa: E501
        :type status: int
        """
        self.openapi_types = {
            'data': List[Company],
            'message': str,
            'status': int
        }

        self.attribute_map = {
            'data': 'data',
            'message': 'message',
            'status': 'status'
        }

        self.data = data
        self.message = message
        self.status = status

    @classmethod
    def from_dict(cls, dikt) -> 'CompanyListResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CompanyListResponse of this CompanyListResponse.  # noqa: E501
        :rtype: CompanyListResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this CompanyListResponse.


        :return: The data of this CompanyListResponse.
        :rtype: List[Company]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CompanyListResponse.


        :param data: The data of this CompanyListResponse.
        :type data: List[Company]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def message(self):
        """Gets the message of this CompanyListResponse.


        :return: The message of this CompanyListResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CompanyListResponse.


        :param message: The message of this CompanyListResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def status(self):
        """Gets the status of this CompanyListResponse.


        :return: The status of this CompanyListResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CompanyListResponse.


        :param status: The status of this CompanyListResponse.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
