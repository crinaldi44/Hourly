# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EventSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_date=None, to_date=None, package_name=None):  # noqa: E501
        """EventSearch - a model defined in OpenAPI

        :param from_date: The from_date of this EventSearch.  # noqa: E501
        :type from_date: str
        :param to_date: The to_date of this EventSearch.  # noqa: E501
        :type to_date: str
        :param package_name: The package_name of this EventSearch.  # noqa: E501
        :type package_name: str
        """
        self.openapi_types = {
            'from_date': str,
            'to_date': str,
            'package_name': str
        }

        self.attribute_map = {
            'from_date': 'from_date',
            'to_date': 'to_date',
            'package_name': 'package_name'
        }

        self.from_date = from_date
        self.to_date = to_date
        self.package_name = package_name

    @classmethod
    def from_dict(cls, dikt) -> 'EventSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventSearch of this EventSearch.  # noqa: E501
        :rtype: EventSearch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_date(self):
        """Gets the from_date of this EventSearch.

        The earliest date a result can take place at.  # noqa: E501

        :return: The from_date of this EventSearch.
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this EventSearch.

        The earliest date a result can take place at.  # noqa: E501

        :param from_date: The from_date of this EventSearch.
        :type from_date: str
        """
        if from_date is None:
            raise ValueError("Invalid value for `from_date`, must not be `None`")  # noqa: E501

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this EventSearch.

        Represents the latest date a resultant event can be.  # noqa: E501

        :return: The to_date of this EventSearch.
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this EventSearch.

        Represents the latest date a resultant event can be.  # noqa: E501

        :param to_date: The to_date of this EventSearch.
        :type to_date: str
        """
        if to_date is None:
            raise ValueError("Invalid value for `to_date`, must not be `None`")  # noqa: E501

        self._to_date = to_date

    @property
    def package_name(self):
        """Gets the package_name of this EventSearch.

        The name of the package.  # noqa: E501

        :return: The package_name of this EventSearch.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this EventSearch.

        The name of the package.  # noqa: E501

        :param package_name: The package_name of this EventSearch.
        :type package_name: str
        """

        self._package_name = package_name
